#include <iostream>
using namespace std;
template<typename T>
struct dnode {
	dnode<T> *next;
	dnode<T> *prev;
	T data;
};
template<typename T>
class list
{
private:
	dnode<T>* FRONT;
	dnode<T>* BACK;
	int n;
public:
	list() {
		FRONT = BACK = NULL;
		n = 0;
	}

	list(const list& src) {
		FRONT = NULL;
		operator=(src);
	}

	~list() {
		clear();
	}

	void push_front(const T& val) {
		dnode<T>* temp;
		temp = new dnode<T>;

		if (temp == NULL) {
			throw("List Overflow!");
		}
		temp->data = val;
		temp->prev = NULL;

		if (FRONT == NULL) //list is empty
		{
			FRONT = BACK = temp;
			temp->next = NULL;
		}
		else {
			temp->next = FRONT;
			temp->prev = temp;
			FRONT = temp;
		}
		n++;
	}
	void push_back(const T& val) {
		dnode<T>* temp;
		temp = new dnode<T>;
		temp->data = val;
		temp->next = NULL;
		if (BACK == NULL)
		{
			FRONT = BACK = temp;
			temp->prev = NULL;
		}
		else {
			temp->prev = BACK;
			BACK->next = temp;
			BACK = temp;
		}
		n++;
	}
	T front() const {
		if (FRONT == NULL)
			throw("List Underflow!");
		return FRONT->data;
	}
	T back() const {
		if (FRONT == NULL)
			throw("List Underflow!");
		return BACK->data;
	}
	void pop_front() {
		if (FRONT == NULL)
			throw("List Underflow!");
		dnode<T>* temp;
		temp = FRONT;
		FRONT = FRONT->next;
		delete temp;
		if (FRONT != NULL) {
			FRONT->prev = NULL;
		}
		else {
			BACK = NULL;
		}
		n--;
	}
	void pop_back() {
		if (FRONT == NULL)
			throw("List Underflow!");
		dnode<T>* temp;
		temp = BACK;
		BACK = BACK->prev;
		delete temp;
		if (BACK == NULL) {
			FRONT = NULL;
		}
		else {
			BACK->next = NULL;
		}
		n--;
	}

	bool empty() const {
		// return FRONT == NULL;
		if (FRONT == NULL)
			return true;
		else
			return false;
	}

	bool full() const {
		dnode<T>* temp;
		temp = new dnode<T>;
		if (temp == NULL) {
			return true;
		}
		else {
			delete temp;
			return false;
		}
	}

	void clear() {
		while (!empty()) {
			pop_front();
		}
		// n = 0;
	}

	int size() const {
		return n;
	}
	class reverse_iterator {
	private:
		dnode<T>* ptr;
		friend class list;
	public:
		    bool operator !=(const reverse_iterator& rhs)
		    {
			return ptr != rhs.ptr;
		    }
			bool operator ==(const reverse_iterator& rhs)
			{
				return ptr == rhs.ptr;
			}
			 void operator =(const reverse_iterator& rhs)
			{
				 ptr = rhs.ptr;
			}
			void operator++() 
			{
					ptr = ptr->prev;
			}
			reverse_iterator operator++(int)
			{ 
					reverse_iterator old;
					old = *this; 
					operator++();
					return old;
			}
			void operator--()
			{
				ptr = ptr->next;
			}
			reverse_iterator operator--(int)
			{
				reverse_iterator old;
				old = *this;
				operator--();
				return old;
			}
			T& operator*()
			{
					return ptr->data;
			}
			T* operator->()
			{
				return &ptr->data;
			}
				
	};
	reverse_iterator rbegin() {
		reverse_iterator i;
		i.ptr = BACK;
		return i;
	}
	reverse_iterator rend() {
		reverse_iterator i;
		i.ptr = NULL;
		return i;
	}

};
int main() {
	list<int> s;
	s.push_back(5);
	s.push_back(2);
	s.push_back(7);
	s.push_back(9);

	list<int>::reverse_iterator it;
	it = s.rbegin();
	for (it = s.rbegin(); it != s.rend(); ++it) 
	{
		cout << *it << " ";
		
	}
	
}